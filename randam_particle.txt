async function main(){
    const numParticles = 1000;
    const updateInterval = 100; 
    const particleSize = { x: 0.01, y: 0.01 }; 

    const canvas = document.querySelector("canvas");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;


    if (!navigator.gpu) {
        throw new Error("WebGPU not supported on this browser.");
    }
    
    const adapter = await navigator.gpu.requestAdapter();
    if (!adapter) {
        throw new Error("No appropriate GPUAdapter found.");
    }
    const device = await adapter.requestDevice();

    const context = canvas.getContext("webgpu");
    const canvasFormat = navigator.gpu.getPreferredCanvasFormat();
    context.configure({
        device: device,
        format: canvasFormat,
    });

    // Camera settings
    const cameraPosition = { x: 0, y: 0, z: -1 };
    const cameraLookAt = { x: 0, y: 0, z: 0 };
    const cameraUp = { x: 0, y: 1, z: 0 };
    const fov = 60 * Math.PI / 180; // in radians
    const aspectRatio = canvas.width / canvas.height;
    const near = 0.1;
    const far = 100;

    const viewMatrix = getViewMatrix(cameraPosition, cameraLookAt, cameraUp);
    const projectionMatrix = getPerspectiveMatrix(fov, aspectRatio, near, far);

    // View matrix buffer
    const viewMatrixBuffer = device.createBuffer({
        size: 64, // 4x4 matrix of float32
        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
        mappedAtCreation: true
    });
    new Float32Array(viewMatrixBuffer.getMappedRange()).set(viewMatrix);
    viewMatrixBuffer.unmap();

    // Projection matrix buffer
    const projMatrixBuffer = device.createBuffer({
        size: 64, // 4x4 matrix of float32
        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
        mappedAtCreation: true
    });
    new Float32Array(projMatrixBuffer.getMappedRange()).set(projectionMatrix);
    projMatrixBuffer.unmap();

    // パーティクルのデータ初期化
    let particlesData = new Float32Array(numParticles * 4); // x, y, vx, vy
    for (let i = 0; i < numParticles; i++) {
        particlesData[i * 4 + 0] = Math.random() * 2 - 1; // x
        particlesData[i * 4 + 1] = Math.random() * 2 - 1; // y
        particlesData[i * 4 + 2] = Math.random() * 0.01 - 0.005; // vx
        particlesData[i * 4 + 3] = Math.random() * 0.01 - 0.005; // vy
    }

    const particlesBuffer = device.createBuffer({
        size: particlesData.byteLength,
        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,
        mappedAtCreation: true,
    });
    new Float32Array(particlesBuffer.getMappedRange()).set(particlesData);
    particlesBuffer.unmap();

    // シェーダーモジュールの定義
    const shaderModule = device.createShaderModule({
        code: `
            @group(0) @binding(0)
            var<uniform> viewMatrix: mat4x4<f32>;

            @group(0) @binding(1)
            var<uniform> projMatrix: mat4x4<f32>;

            @group(0) @binding(2)
            var<storage, read> particles : array<vec4<f32>>;  // 更新は削除し、読み取りのみを行う

            @vertex
            fn vertexMain(@builtin(vertex_index) index : u32) -> @builtin(position) vec4<f32> {
                let particle = particles[index];
                let position = particle.xy;
                return vec4<f32>(position, 0.0, 1.0);  // GPU上でのデータ更新は削除
            }

            @fragment
            fn fragmentMain() -> @location(0) vec4<f32> {
                return vec4<f32>(1.0, 1.0, 1.0, 1.0);  // 描画色の指定
            }

        `,
    });

    // バインドグループレイアウトの定義
    const bindGroupLayout = device.createBindGroupLayout({
        entries: [
            {
                binding: 0,
                visibility: GPUShaderStage.VERTEX,
                buffer: {
                    type: 'uniform',
                    hasDynamicOffset: false,
                    minBindingSize: 64,  // 4x4 float matrix
                },
            },
            {
                binding: 1,
                visibility: GPUShaderStage.VERTEX,
                buffer: {
                    type: 'uniform',
                    hasDynamicOffset: false,
                    minBindingSize: 64,  // 4x4 float matrix
                },
            },
            {
                binding: 2,
                visibility: GPUShaderStage.VERTEX,
                buffer: {
                    type: 'read-only-storage',
                    hasDynamicOffset: false,
                    minBindingSize: particlesData.byteLength,
                },
            },
        ],
    });

    // パイプラインレイアウトの作成
    const pipelineLayout = device.createPipelineLayout({
        bindGroupLayouts: [bindGroupLayout]
    });

    // レンダリングパイプラインの設定
    const pipeline = device.createRenderPipeline({
        label: "pipeline",
        layout: pipelineLayout,
        vertex: {
            module: shaderModule,
            entryPoint: 'vertexMain', // This should exactly match the function name in WGSL.
            buffers: []
        },
        fragment: {
            module: shaderModule,
            entryPoint: 'fragmentMain',
            targets: [{
                format: canvasFormat,
            }],
        },
        primitive: {
            topology: 'point-list',
        },
    });

    const bindGroup = device.createBindGroup({
        layout: pipeline.getBindGroupLayout(0), // as defined in pipeline setup
        entries: [
            { binding: 0, resource: { buffer: viewMatrixBuffer } },
            { binding: 1, resource: { buffer: projMatrixBuffer } },
            { binding: 2, resource: { buffer: particlesBuffer } },
        ],
    });

    function updateParticles() {
        const width = canvas.width;
        const height = canvas.height;
        const time = Date.now() * 0.001;

        for (let i = 0; i < numParticles; i++) {
            let index = i * 4;
            let x = particlesData[index + 0];
            let y = particlesData[index + 1];
            let vx = particlesData[index + 2];
            let vy = particlesData[index + 3];

            vx += Math.sin(time + i) * 0.01;
            vy += Math.cos(time + i) * 0.01;

            x += vx;
            y += vy;

            if (x <= 0 || x >= width) {
                vx = -vx;
            }
            if (y <= 0 || y >= height) {
                vy = -vy;
            }

            particlesData[index + 0] = x;
            particlesData[index + 1] = y;
            particlesData[index + 2] = vx;
            particlesData[index + 3] = vy;
        }

        // GPUバッファにデータをアップロード
        device.queue.writeBuffer(
            particlesBuffer,
            0,
            particlesData.buffer,
            particlesData.byteOffset,
            particlesData.byteLength
        );
    }


    // 描画のアップデート
    function update() {
        const commandEncoder = device.createCommandEncoder();
        const passEncoder = commandEncoder.beginRenderPass({
            colorAttachments: [{
                view: context.getCurrentTexture().createView(),
                loadOp: 'clear',
                clearValue: { r: 0, g: 0, b: 0, a: 1 },
                storeOp: 'store',
            }],
        });
        passEncoder.setPipeline(pipeline);
        passEncoder.setBindGroup(0, bindGroup);
        passEncoder.draw(numParticles);
        passEncoder.end();
        device.queue.submit([commandEncoder.finish()]);
    }

    // アニメーションループを設定
    function animationLoop() {
        updateParticles();  // パーティクルのデータを更新
        update();           // 画面に描画
        requestAnimationFrame(animationLoop);  // 次のフレームで再実行
    }

    animationLoop();  // アニメーションループを開始

}

main();
